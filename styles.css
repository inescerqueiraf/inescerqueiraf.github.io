/*
    Nome: Inês Cerqueira
    Nº Estudante: 3210487
    Portfólio
    3º, 2023-2024
    2º Semestre
    Unidade Curricular: Laboratório de Projeto II
    Curso: DGM
    ESAD.CR
    Docente: Marco Heleno
    04 Junho 2024
*/

/*Defini a tipografia do meu site, utilizando a regra font-face, com o src
referenciando os ficheiros. Defini posteriormente as propriedades font-weight e
font-style, para dar o valor "normal" às duas.*/
@font-face {
    font-family: 'Sysfont';
    src: url('font/sysfont/sysfont.woff2') format('woff2'),
        url('font/sysfont/sysfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}



/* Universal Selector */

/*Defini as margens e o padding do meu ficheiro a 0, tal como aconselhado pelo
professor. Para aplicar a minha tipografia a todo o texto do site, utilizei o
universal selector e defini a propriedade font-family, com o valor "Sysfont".
Defini a propriedade box-sizing, com o valor border-box, para que largura e a
altura dos elementos sejam calculadas, mesmo quando o padding ou a border são
específicados, ou não.*/
* {

    margin: 0;
    padding: 0;
    font-family: "Sysfont";
    box-sizing: border-box;
}



/* Element Selector */

/*Defini a largura do meu html a 100%, para "forçar" o meu conteúdo a ocupar o
comprimento da janela. Através das propriedades overflow-y e x, dei o valor
hidden, de forma a que o conteúdo fique limitado à janela. Ou seja, o conteúdo
que não cabe dentro desta, torna-se invisível.*/
html {
    width: 100%;
    overflow-y: hidden;
    overflow-x: hidden;
}


/*Utilizei a propriedade border, para dar uma linha de 5px ao meu body.
Posteriormente, defini as propriedades height e width, atribuindo-lhes os
valores 100vh e 100%, respetivamente, para obrigar o conteúdo do body, ocupar
todo o espaço. Depois, defini a propriedade margin, com os seus respetivos
valores. Atribui a propriedade display, com valor flex, para apresentar o meu
contéudo flexível,no que diz respeito a blocos. Atribui a propriedade
flex-direction, para definir que o valor seria em coluna, ou seja, que o
conteúdo em bloco seja apresentado numa coluna vertical. Atribui a propriedade
flex-wrap, com o valor nowrap, dando a indicação que não quero que o conteúdo
flexível se "parta".*/
body {
    border: 5px solid rgba(0, 0, 0, 1);
    height: 100vh;
    max-height: 100%;
    width: 100%;
    max-width: 100%;
    margin: 0 20px 10px 0;
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
}


/*Defini a propriedade border-bottem, para acrescentar uma linha inferior ao meu
header.*/
header {
    border-bottom: 5px solid rgb(0, 0, 0);
}


/*Comecei por definir a propriedade background-image, com o valor url para o meu
png (são as linhas do header), prosseguindo */
header>div {
    background-image: url(imagens/header_test.png);
    background-repeat: no-repeat space;
    margin: 5px 10px 10px 10px;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    height: 3em;
}


/**/
header>div>div {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    background-color: rgb(255, 255, 255);
    margin-left: 60px;
    padding: 0 20px;
    padding-top: 5px;
}


/**/
header>div>div>div {
    height: 100%;
    aspect-ratio: 1;
    border: 5px solid rgb(0, 0, 0);
}


/**/
header>div>a {
    height: calc(100% + 1px);
    background-color: rgb(255, 255, 255);
    margin-left:
        80px;
    font-size: 1.5em;
    padding: 0 20px;
}


/*Nestes próximos 4 passos, de uma forma geral, estilizei os meus links. Ou
seja, todos têm a cor preta e a propriedade text-decoration, com exceção ao
primeiro. No caso do hover, acrescentei ainda a propriedaxe cursor, definindo o
seu valor como pointer (em suma, estilizei o cursor quando este passa por cima
de um link.)*/
a:link {
    color: rgb(0, 0, 0);
    text-decoration: none;
}

a:hover {
    color: rgb(0, 0, 0);
    text-decoration: underline;
    cursor: pointer;
}

a:active {
    color: rgb(0, 0, 0);
    text-decoration: underline;
}

a:visited {
    color: rgb(0, 0, 0);
    text-decoration: underline;
}

/*Para a nav, comecei por definir o padding (0.5em) e a altura (2.5em), limitando o meu conteúdo a estes valores.
Posteriormente, alterei a tamanho da minha fonte através da propriedade
font-size e estilizei o meu texto para maiúsculas, com a propriedade
text-transform.
Por fim, defini ainda uma linha inferior, de 5px a preto, recorrendo à propriedade border-bottom.*/
nav {
    padding: 0.5em;
    height: 2.5em;
    font-size: 1.5em;
    text-transform: uppercase;
    border-bottom: 5px solid rgb(0, 0, 0);
}


/*Defini uma margem à direita de 1em, utilizando a propriedade margin-right, aos
separadores da minha nav*/
nav>a {
    margin-right: 1em;
}


/*Defini a propriedade text-decoration, com o valor underline, para que o
separador ao qual nos encontramos no site, aparecer estilizado com um
sublinhado.*/
#selected_tab {
    text-decoration: underline;
}



/*Começa scrollbar*/

/*No que diz respeito à scrollbar, com a ajuda do professor, apenas defini a
propriedade altura e largura, da minha main, com os valores de 100%. Face ao
código restante, foi gerado pelo site "https://scrollbar.app/", fornecido também
pelo professor. Desta forma, consegui estilizar as minhas scrollbars (y e x).*/
main {
    height: 100%;
    width: 100%;
    overflow-y: scroll;
    overflow-x: visible;
    --sb-track-color: rgb(255, 255, 255);
    --sb-thumb-color: rgb(0, 0, 0);
    --sb-size: 15px;
}

main::-webkit-scrollbar {
    width: var(--sb-size);
}

main::-webkit-scrollbar-track {
    background: var(--sb-track-color);
    border-radius: 0px;
}

main::-webkit-scrollbar-thumb {
    background: var(--sb-thumb-color);
    border-radius: 0px;

}

@supports not selector(::-webkit-scrollbar) {
    main {
        scrollbar-color: var(--sb-thumb-color) var(--sb-track-color);
    }
}

/*Acaba scrollbar*/

/**/
#gallery {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
}

#gallery a {
    width: 200px;
    padding: 2em;
}

figcaption>h3 {
    text-transform: uppercase;
}

a figure {
    margin: auto;
    text-align: center;
    width: fit-content;
    max-width: 90%;
}

a figure img {
    width: 120px;
}


#contact_box {
    border: 5px solid rgb(0, 0, 0);
    box-shadow: 5px 5px 0px 0px rgba(0, 0, 0, 1);
    width: 350px;
    max-width: 90%;
}


#contact_box h3 {
    padding: 0.2em;
    text-align: center;
    text-transform: uppercase;
    border-bottom: 5px solid rgb(0, 0, 0);
}

#contact_box address {
    padding: 0.5em 1em;
    border-bottom: 5px solid rgb(0, 0, 0);
    margin-bottom: 2px;
    text-transform: uppercase;
}

#contact_box address>p {
    margin: 0.5em 0;
    font-size: large;
    font-style: normal;
}


#aboutme {
    height: 100%;
    width: 90%;
    margin: auto;
    display: flex;
    gap: 10%;
    justify-content: center;
    align-items: center;
}

#aboutme_box {
    border: 5px solid rgb(0, 0, 0);
    width: 400px;
    max-height: 90%;
    max-width: 40%;
    overflow-y: scroll;
    padding: 0.5em 1em;
    font-size: large;
    box-shadow: 5px 5px 0px 0px rgb(0, 0, 0);
}

#aboutme_box>p {
    margin-bottom: 0.5em;
}

#aboutme_box strong,
#aboutme_box h3 {
    text-transform: uppercase;
}

#aboutme_box li {
    list-style-type: square;
}

#profilepic {
    width: 20em;
    max-width: 40%;
}

main>article>.project_box {
    border: 5px solid rgb(0, 0, 0);
    min-width: 15%;
    width: fit-content;
    max-width: 50%;
    padding: 0.5em;
    font-size: large;
    text-align: start;
    margin-top: 3em;
    margin-bottom: 3em;
    margin-left: auto;
    margin-right: auto;
    box-shadow: 5px 5px 0px 0px rgb(0, 0, 0);
}


article>h2.project_title {
    position: sticky;
    background-color: rgb(255, 255, 255);
    color: rgb(0, 0, 0);
    top: 0px;
    left: 0px;
    border-bottom: 5px solid rgb(0, 0, 0);
}

article>h2 {
    text-align: center;
    text-transform: uppercase;
    padding: 1em;
}

article section.project_images {
    display: flex;
    flex-wrap: wrap;
}

article section.project_images>figure {
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 50%;
    padding: 3em 0;
    gap: 1em;
    border: 5px solid rgb(0, 0, 0);
    padding: 2em 0;
}

article figcaption>h3 {
    text-transform: uppercase;
    text-align: center;
    padding: 0.5em;
}

article section.project_video>figure>video {
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 50%;
    border: 5px solid rgb(0, 0, 0);
    margin: auto;
    margin-bottom: 1em;
}

article section.project_video>figure>figcaption {
    text-transform: uppercase;
    text-align: center;
    margin-bottom: 1em;
}

article section.project_assets {
    display: flex;
    flex-wrap: wrap;
}

article section.project_assets>figure {
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex-grow: 1;
    width: 33.33%;
    padding: 0.5em;
    gap: 2em;
    border: 5px solid rgb(0, 0, 0);
}

article>figure>img {
    display: flex;
    width: 50%;
    margin: 2em auto 0 auto;
    border: 5px solid rgb(0, 0, 0);
}

div.qr_code {
    width: 100%;
    margin: 2em auto;
    text-align: center;
}

div.qr_code img {
    width: 25%;
    margin: 0 auto;
}

main>article {
    margin-bottom: 1em;
}

main.centered {
    display: flex;
    width: 100%;
    justify-content: center;
    align-items: center;
}

main>figure#welcome_page_gif {
    display: flex;
    align-items: center;
    height: 90%;
    max-height: 100%;
    width: fit-content;
}

main>figure#welcome_page_gif>a {
    display: flex;
    max-width: 100%;
    max-height: 100%;
}

main>figure#welcome_page_gif>a>img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;

}